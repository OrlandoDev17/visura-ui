---
import Button from "./Button.astro";

interface MenuProps {
  navLinks?: {
    label: string;
    href: string;
    dropDownItems?: {
      label: string;
      href: string;
    }[];
  }[];
  active?: number;
  actions?: boolean;
}

const { navLinks, active = 0, actions = false }: MenuProps = Astro.props;
---

<style>
  .main-menu {
    max-height: 0;
    transition:
      max-height 0.3s ease-in-out,
      opacity 0.3s ease-in-out;
    opacity: 0;
  }

  .main-menu.open {
    max-height: 1000px;
    opacity: 1;
  }

  li:hover .children {
    display: flex;
    opacity: 1;
    transition: all 0.3s ease-in-out;
  }

  .children {
    z-index: 50;
  }
</style>

<label class="block md:hidden" for="menuId">
  <input class="input" type="checkbox" id="menuId" hidden />
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    stroke="currentColor"
    stroke-width="2"
    class="size-11 p-2 rounded-lg cursor-pointer hover:bg-gray-800/50 transition"
    ><path d="M4 5h16"></path><path d="M4 12h16"></path><path d="M4 19h16"
    ></path></svg
  >
</label>

<div
  class="main-menu absolute top-18 left-0 right-0 z-50 bg-dark-blue py-2 px-8 transition-opacity duration-200"
>
  <article
    class="flex flex-col gap-4 bg-special rounded-xl p-8 border border-white/10"
  >
    <ul class="flex flex-col gap-2">
      {
        navLinks?.map((item, index) => {
          return (
            <li class="flex flex-col">
              <a
                class={`flex items-center gap-2 font-medium px-4 py-2 rounded-xl w-full hover:bg-gray-800/50 hover:text-light-blue transition-all ${index === active && "text-light-blue bg-light-blue/10"}`}
                href={item.href}
              >
                {item.label}
                {item.dropDownItems && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="lucide lucide-chevron-down-icon lucide-chevron-down"
                  >
                    <path d="m6 9 6 6 6-6" />
                  </svg>
                )}
              </a>
              {item.dropDownItems && (
                <ul class="hidden flex-col gap-2 relative top-full bg-dark-blue py-4 px-8 rounded-xl w-full mt-2 children opacity-0 transition">
                  {item.dropDownItems.map((item) => (
                    <li>
                      <a
                        class="flex items-center gap-2 font-medium px-4 py-2 rounded-xl w-full hover:bg-gray-800/50 hover:text-light-blue transition-all"
                        href={item.href}
                      >
                        {item.label}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          );
        })
      }
    </ul>
    {
      actions && (
        <>
          <hr class="h-2 border-white/10" />
          <Button
            label="Iniciar SesiÃ³n"
            type="fill"
            className="justify-center"
          />
          <Button
            label="Registrarse"
            type="outline"
            className="justify-center"
          />
        </>
      )
    }
  </article>
</div>

<script is:inline>
  const checkbox = document.getElementsByClassName("input")[0];
  const menu = document.getElementsByClassName("main-menu")[0];

  checkbox.addEventListener("change", () => {
    if (checkbox.checked) {
      menu.classList.add("open");
    } else {
      menu.classList.remove("open");
    }
  });
</script>
